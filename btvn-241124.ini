1. Tìm các số chẵn trong mảng và tạo một mảng mới
Mô tả: Viết hàm findEvenNumbers(arr) sử dụng phương thức filter để lọc ra các số chẵn trong mảng và trả về một mảng mới
chứa các số chẵn đó.
Yêu cầu: Trả về một mảng các số chẵn.
Ví dụ: console.log(findEvenNumbers([1, 2, 3, 4, 5, 6])); // [2, 4, 6]
function findEvenNumbers(arr) {
    return arr.filter(num => num % 2 === 0);
}
console.log(findEvenNumbers([1, 2, 3, 4, 5, 6])); // [2, 4, 6]


2. Tạo một mảng mới bằng cách nhân đôi giá trị của từng phần tử
Mô tả: Viết hàm doubleValues(arr) sử dụng phương thức map để nhân đôi giá trị của từng phần tử trong mảng và trả về một mảng mới.
Yêu cầu: Trả về một mảng mới với các giá trị nhân đôi.
Ví dụ: console.log(doubleValues([1, 2, 3])); // [2, 4, 6]
function doubleValues(arr) {
    return arr.map(num => num * 2);
}

console.log(doubleValues([1, 2, 3])); // [2, 4, 6]

3. Xóa phần tử cuối cùng và đầu tiên của mảng
Mô tả: Viết hàm removeFirstLast(arr) sử dụng các phương thức shift và pop để xóa phần tử đầu tiên và cuối cùng của mảng.
Yêu cầu: Trả về mảng sau khi đã xóa phần tử đầu tiên và cuối cùng.
Ví dụ: console.log(removeFirstLast([1, 2, 3, 4, 5])); // [2, 3, 4]
function removeFirstLast(arr) {
    arr.shift();
    arr.pop();
    return arr;
}

console.log(removeFirstLast([1, 2, 3, 4, 5])); // [2, 3, 4]


4. Kết hợp hai mảng
Mô tả: Viết hàm concatArrays(arr1, arr2) sử dụng phương thức concat để kết hợp hai mảng lại với nhau.
Yêu cầu: Trả về mảng kết hợp.
ví dụ: console.log(concatArrays([1, 2], [3, 4])); // [1, 2, 3, 4]
function concatArrays(arr1, arr2) {
    return arr1.concat(arr2);
}

console.log(concatArrays([1, 2], [3, 4])); // [1, 2, 3, 4]


5. Kiểm tra xem một phần tử có tồn tại trong mảng
Mô tả: Viết hàm containsElement(arr, value) sử dụng phương thức includes để kiểm tra xem một phần tử có tồn tại trong mảng không.
Yêu cầu: Trả về true nếu phần tử tồn tại, false nếu không.

Ví dụ:
console.log(containsElement([1, 2, 3], 2)); // true
console.log(containsElement([1, 2, 3], 4)); // false
function containsElement(arr, value) {
    return arr.includes(value);
}
console.log(containsElement([1, 2, 3], 2)); // true
console.log(containsElement([1, 2, 3], 4)); // false


6. Tạo một mảng các đối tượng mới từ một mảng các chuỗi
Mô tả: Viết hàm createObjectArray(arr) để tạo một mảng các đối tượng từ một mảng chuỗi, trong đó mỗi chuỗi sẽ là một đối tượng với các thuộc tính original
(là chuỗi gốc) và length (là độ dài của chuỗi). Sử dụng map để thực hiện điều này.
Yêu cầu: Trả về mảng các đối tượng.
Ví dụ: console.log(createObjectArray(['apple', 'banana', 'cherry']));
=> [{original: 'apple', length: 5}, {original: 'banana', length: 6}, {original: 'cherry', length: 6}]
function createObjectArray(arr) {
    return arr.map(str => ({
        original: str,
        length: str.length
    }));
}

console.log(createObjectArray(['apple', 'banana', 'cherry']));
// [{original: 'apple', length: 5}, {original: 'banana', length: 6}, {original: 'cherry', length: 6}]


7. Tìm tất cả các phần tử trùng lặp trong mảng
Mô tả: Viết hàm findDuplicates(arr) sử dụng filter, indexOf, và lastIndexOf để tìm tất cả các phần tử xuất hiện nhiều hơn một lần trong mảng.
Yêu cầu: Trả về mảng các phần tử trùng lặp.
Ví dụ: console.log(findDuplicates([1, 2, 3, 2, 4, 5, 1])); // [2, 1]
function findDuplicates(arr) {
    return arr.filter((value, index, self) => self.indexOf(value) !== index && self.lastIndexOf(value) === index);
}

console.log(findDuplicates([1, 2, 3, 2, 4, 5, 1])); // [2, 1]


8. Tìm các phần tử không xuất hiện trong mảng
Mô tả: Viết hàm findMissing(arr1, arr2) sử dụng filter, includes để tìm tất cả các phần tử trong mảng arr1 mà không có trong mảng arr2.
Ví dụ: console.log(findMissing([1, 2, 3, 4], [3, 4, 5])); // [1, 2]
function findMissing(arr1, arr2) {
    return arr1.filter(item => !arr2.includes(item));
}

console.log(findMissing([1, 2, 3, 4], [3, 4, 5])); // [1, 2]


9. Sắp xếp mảng theo thứ tự chữ cái và đảo ngược
Mô tả: Viết hàm sortAndReverse(arr) sử dụng forEach, push, và sort để sắp xếp mảng theo thứ tự chữ cái và sau đó đảo ngược mảng.
Yêu cầu: Trả về mảng đã sắp xếp và đảo ngược.
Ví dụ: console.log(sortAndReverse(['apple', 'banana', 'cherry'])); // ['cherry', 'banana', 'apple']
function sortAndReverse(arr) {
    const sorted = arr.slice().sort();  // Tạo bản sao của mảng và sắp xếp
    const reversed = [];
    for (let i = sorted.length - 1; i >= 0; i--) {
        reversed.push(sorted[i]);
    }
    return reversed;
}

console.log(sortAndReverse(['apple', 'banana', 'cherry'])); // ['cherry', 'banana', 'apple']


10. Đảo ngược một phần của mảng
Mô tả: Mô tả: Viết hàm reverseSubArray(arr, start, end) để đảo ngược một phần của mảng từ chỉ số start đến end. Sử dụng forEach và push
Ví dụ: console.log(reverseSubArray([1, 2, 3, 4, 5], 1, 3)); // [1, 4, 3, 2, 5]
function reverseSubArray(arr, start, end) {
    const result = [];
    // Thêm các phần tử trước phần cần đảo ngược
    for (let i = 0; i < start; i++) {
        result.push(arr[i]);
    }
    // Thêm các phần tử đã đảo ngược
    for (let i = end; i >= start; i--) {
        result.push(arr[i]);
    }
    // Thêm các phần tử sau phần cần đảo ngược
    for (let i = end + 1; i < arr.length; i++) {
        result.push(arr[i]);
    }
    return result;
}

console.log(reverseSubArray([1, 2, 3, 4, 5], 1, 3)); // [1, 4, 3, 2, 5]
