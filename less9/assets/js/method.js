// thu·ªôc t√≠nh array

/*
1. Array.length
=> tr·∫£ v·ªÅ s·ªë ph·∫ßn t·ª≠ trong 1 m·∫£ng. ƒë√≥ 1 s·ªë nguy√™n 32 bit kh√¥ng d·∫•u v√† lu√¥n l·ªõn h∆°n ch·ªâ m·ª•c l·ªõn
nh·∫•t c·ªßa m·∫£ng (ch·ªâ m·ª•c l·ªõn nh·∫•t ch√≠nh l√† ƒë·ªô d√†i c·ªßa m·∫£ng tr·ª´ ƒëi 1)
*/

// byte
/*
s·ªë nguy√™n 32 bit (hay c√≤n g·ªçi l√† 4 byte)

1. s·ªë nguy√™n c√≥ d·∫•u (signed integer)
- d√†i gi√° tr·ªã t·ª´: -2^9 ƒë·∫øn 2^9
- c·∫•u tr√∫c: 1 b√≠t ƒë·∫ßu ti√™n d√πng ƒë·ªÉ bi·ªÉu di·ªÖn d·∫•u (0 cho s·ªë l∆∞·ª£ng, 1 cho s·ªë √¢m) v√† 31 c√≤n l·∫°i
bi·ªÉu di·ªÖn gi√° tr·ªã tuy·ªát ƒë·ªëi c·ªßa s·ªë nguy√™n
ex: 1: 000000 000000 000000 000001

2. s·ªë nguy√™n kh√¥ng d·∫•u (unsigned integer)
- d·∫£i gi√° tr·ªã: 0 ->  4 t·ªâ h∆°n
*/

/*
2. concat()
=> tr·∫£ v·ªÅ 1 ƒë·ªëi t∆∞·ª£ng m·∫£ng m·ªõi ch·ª©a 2 m·∫£ng ho·∫∑c nhi·ªÅu m·∫£ng ƒë∆∞·ª£c h·ª£p nh·∫•t
*/

// ex1: n·ªëi m·∫£ng
const array1 = [1, 2, 3];
const array2 = [3, 4, 5];
const result = array1.concat(array2);
// console.log('üöÄ ~ result:', result);

// ex2: n·ªëi nhi·ªÅu m·∫£ng l·∫°i v·ªõi nhau
const array3 = [7, 8, 9];
const result1 = array1.concat(array2, array3);
// console.log('üöÄ ~ result1:', result1);

// ex3: n·ªëi m·∫£ng v·ªõi c√°c gi√° tr·ªã ƒë∆°n l·∫ª
const result2 = array1.concat(4, 5);
// console.log('üöÄ ~ result2:', result2);

// ex4: n·ªëi m·∫£ng r·ªóng
const array4 = [];
const result4 = array1.concat(array4);
// console.log('üöÄ ~ result4:', result4);

/*
3. copywithin()
=> sao ch√©p 1 ph·∫ßn t·ª≠ c·ªßa m·∫£ng ƒë√£ cho b·∫±ng c√°c ph·∫ßn t·ª≠ c·ªßa ch√≠nh n√≥ v√† tr·∫£ v·ªÉ 1 m·∫£ng c√≥ s·ª≠a ƒë·ªïi

c√∫ ph√°p s·ª≠ d·ª•ng:
array.copyWithin(target, start, end)
- target(b·∫Øt bu·ªôc): v·ªã tr√≠ m√† b·∫°n mu·ªën sao ch√©p ph·∫ßn t·ª≠
- start(tu·ª≥ ch·ªçn): v·ªã tr√≠ b·∫Øt ƒë·∫ßu sao ch√©p
- end(tu·ª≥ ch·ªçn): v·ªã tr√≠ k·∫øt th√∫c sao ch√©p
*/

// ex1: sao ch√©p c√°c ph·∫ßn t·ª≠ trong m·∫£ng v√†o ch√≠nh n√≥
const array5 = [1, 2, 3, 4, 5];
// sao ch√©p ph·∫ßn t·ª≠ t·ª´ ch·ªâ s√¥ 0 ƒë·∫øn 2 (kh√¥ng bao g·ªìm ch·ªâ s·ªë 2) v√†o v·ªã tr√≠ ch·ªâ s·ªë 3
array5.copyWithin(3, 0, 2);
/*
m·∫£ng g·ªëc: [1, 2, 3, 4, 5]
ph∆∞∆°ng th·ª©c copyWithin(3, 0, 2) => s·∫Ω sao ch√©p ph·∫ßn t·ª≠ t·ª´ ch·ªâ s·ªë 0 ƒë·∫øn 2 (c√°c ph·∫ßn t·ª≠ [1, 2])
v√†o v·ªã tr√≠ b·∫Øt ƒë·∫ßu t·ª´ ch·ªâ s·ªë 3
m·∫£ng sau khi thay ƒë·ªïi:¬†[1, 2, 3, 1, 2]
*/
// console.log('üöÄ ~ array5:', array5);

// ex2: sao ch√©p to√†n b·ªô m·∫£ng v√†o v·ªã tr√≠ kh√°c
const array6 = [10, 20, 30, 40, 50];
array6.copyWithin(2); // sao ch√©p to√†n b·ªô m·∫£ng t·ª´ ch·ªâ s·ªë 0 v√†o v·ªã tr√≠ b·∫Øt ƒë·∫ßu t·ª´ v·ªã tr√≠ 2
// console.log('üöÄ ~ array6:', array6);

// ex3: sao ch√©p 1 ph·∫ßn t·ª≠ c·ªßa m·∫£ng v√†o 1 v·ªã tr√≠ kh√°c trong m·∫£ng
const array7 = [1, 2, 3, 4, 5]; // 2, 3, 4,
array7.copyWithin(2, 1, 4);
// array7.copyWithin(2, 1, 4): sao ch√©p c√°c ph·∫ßn t·ª≠ t·ª´ ch·ªâ s·ªë 1 ƒë·∫øn 4 (c√°c ph·∫ßn [2, 3, 4])
// console.log('üöÄ ~ array7:', array7);

/*
4. includes(): ki·ªÉm tra xem m·∫£ng c√≥ ch·ª©a trong m·∫£ng hay kh√¥ng

c√∫ ph√°p:
array.includes(element, start)
- element(b·∫Øt bu·ªôc): ph·∫ßn t·ª≠ m√† m√¨nh mu·ªën ki·ªÉm tra xem c√≥ t·ªìn t·∫°i trong m·∫£ng hay kh√¥ng
- start (tu·ª≥ ch·ªçn): ch·ªâ s·ªë b·∫Øt ƒë·∫ßu t√¨m ki·∫øm
*/

// ex1: ki·ªÉm tra xem ph·∫ßn t·ª≠ c√≥ trong m·∫£ng kh√¥ng
const array8 = [1, 2, 3, 4, 5];
// console.log(array8.includes(3)); // output: true
// console.log(array8.includes(6)); // output: false

// // ex2: ki·ªÉm tr·∫£ ph·∫ßn t·ª≠ ·ªü 1 v·ªã tr√≠ c·ª• th·ªÉ
// console.log(array8.includes(4, 3)); // output: true => if (4 === 3) return false
// console.log(array8.includes(2, 3)); // output: false

/*
5. fill()
=> thay th·∫ø t·∫•t c·∫£, ho·∫∑c m·ªôt ph·∫ßn c·ªßa m·∫£ng b·∫±ng 1 gi√° tr·ªã c·ªßa th·ªÉ. n√≥ thay ƒë·ªïi m·∫£ng g·ªëc v√† kh√¥ng
t·∫°o ra m·∫£ng m·ªõi

c√∫ ph√°p:
array.fill(value, start, end)
- value (b·∫Øt bu·ªôc): gi√° tr·ªã m√† b·∫°n mu·ªën thay th√© v√†o ph·∫ßn t·ª≠ c·ªßa m·∫£ng
- start(tu·ª≥ ch·ªçn): v·ªã tr√≠ b·∫Øt ƒë·∫ßu thay th·∫ø
- end(tu·ª≥ ch·ªçn): v·ªã tr√≠ k·∫øt th√∫c thay th·∫ø
*/

// ex1:
const array9 = [1, 2, 3, 4, 5]; // 2, 3, 4,
// array9.fill(0);
array9.fill(0, 1, 4);
// console.log('üöÄ ~ array9:', array9);

// ex2:
const array10 = ['a', 'b', 'c', 'd', 'e'];
array10.fill('x', 2, 5);
// console.log('üöÄ ~ array10:', array10);

// ex3:
const array11 = [{}, {}, {}];
const obj = { name: 'New Object' };
array11.fill(obj);
// console.log('üöÄ ~ array11:', array11);

// ex4:
const array12 = [
	{ name: 'nguyen van a' },
	{ name: 'nguyen van b' },
	{ name: 'nguyen van c' },
];
const newObject = { name: 'New Object' };
array12.fill(newObject);
// console.log('üöÄ ~ array12:', array12);
// console.log('üöÄ ~ array12:', array12[0] === array12[1]);

/*
6. join()
=> k·∫øt h·ª£p c√°c ph·∫ßn t·ª≠ c·ªßa m·ªôt m·∫£ng d∆∞·ªõi d·∫°ng 1 chu·ªói

c√∫ ph√°p:
array.join(separator)
- separator(tu·ª≥ ch·ªçn): d·∫•u ph·∫ßn c√°ch gi·ªØa c√°c ph·∫ßn t·ª≠
*/
const array13 = ['apple'];
const array14 = ['apple', 'banana', 'cherry'];
console.log('üöÄ ~ array13:', array13);
console.log('üöÄ ~ array14:', array14);
const result14 = array13.join(' - ');
const result15 = array14.toString();
console.log('üöÄ ~ result14:', result14);
console.log('üöÄ ~ result15:', result15);

/*
7. toString()
=> k·∫øt h·ª£p c√°c ph·∫ßn t·ª≠ c·ªßa m·ªôt m·∫£ng d∆∞·ªõi d·∫°ng 1 chu·ªói

c√∫ ph√°p:
array.toString()
*/
