// 1 object l√† 1 th·ª±c th·ªÉ c√≥ tr·∫°ng th√°i v√† h√†nh vi (properties & method).
// js l√† m·ªôt ng√¥n ng·ªØ d·ª±a tr√™n c√°c ƒë·ªëi t∆∞·ª£ng. m·ªçi th·∫ø ƒë·ªÅ l√† 1 ƒë·ªëi t∆∞·ª£ng tr·ªçng js

/*
c√≥ 3 c√°ch khai b√°o ƒë·ªëi t∆∞·ª£ng:

1. by object literal (theo nghƒ©a ƒëen)
const datas = {property1: value1,property2: value2, property3: value3,... }
ex:
const datas = {
  name: 't√≠n',
  age: 18,
  address: 's√†i g√≤n'
}

2. b·∫±ng c√°ch to·∫° ra 1 ƒë·ªëi t∆∞·ª£ng tr·ª±c ti·∫øp (s·ª≠ d·ª•ng t·ª´ kho√° new)
const objectname = new Object();
objectname.property1 = value1;
objectname.property2 = value2;
objectname.property3 = value3;
ex:
const datas = new Object()
datas.name = 'd≈©ng'
datas.age = 19
data.address = 'H·ªì Ch√≠ Minh City'

3. s·ª≠ d·ª•ng object constructor (using new keyword)
function emp(id, name, salary) {
  this.id = id;
  this.name = name;
  this.salary = salary;
}
const e = new emp(1, 'ƒë·∫°t', 100)

*/

const data1 = {
	name: 't√≠n',
	age: 18,
	address: 's√†i g√≤n',
};
// console.log('üöÄ ~ data1:', data1.name);

const data2 = new Object();
data2.id = 123;
data2.name = 'ƒê·∫°t';
data2.age = 19;
// console.log(data2);

function user(id, name, address) {
	this.id = 345;
	(this.name = 'd≈©ng'), (this.address = 'ha noi');
}
const userObject = new user(1, 'abc', 12);
// console.log('üöÄ ~ userObject:', userObject['name']);

/*
method

1. Object.entries() => tr·∫£ v·ªÅ 1 m·∫£ng v·ªõi c√°c m·∫£ng c·ªßa c√°c t√™n thu·ªôc t√≠nh, gi√° tr·ªã
*/

const person = {
	id: 1,
	name: 'nguyen van a',
	age: 30,
	job: 'dev',
};
// console.log('üöÄ ~ person:', person);

const entries = Object.entries(person);
console.log('üöÄ ~ entries:', entries);

/*
2. Object.assign() => s·ª≠ d·ª•ng ƒë·ªÉ sao ch√©p c√°c thu·ªôc t√≠nh c√≥ th·ªÉ ƒë·∫øm ƒë∆∞·ª£c v√†
s·ªü h·ªØu t·ª´ 1 ƒë·ªëi t∆∞·ª£ng ngu·ªìn sang 1 ƒë·ªëi t∆∞·ª£ng ƒë√≠ch
*/
// ƒë·ªëi t∆∞·ª£ng ngu·ªìn
const source1 = { name: 'John', age: 30 };
const source2 = { job: 'dev', city: 'new york' };
const source3 = { name: 'dang tien hung' };

// ƒë·ªëi t∆∞·ª£ng ƒë√≠ch
const target = {};
// console.log('üöÄ ~ target:', target);
Object.assign(target, source1, source2, source3);
// console.log('üöÄ ~ target:', target);

/*
3. Object.create() => t·∫°o 1 ƒë·ªëi t∆∞·ª£ng m·ªõi v·ªõi c√°c thu·ªôc t√≠nh v√† ƒë·ªëi t∆∞·ª£ng nguy√™n m·∫´u ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh

- ·ª©ng d·ª•ng c·ªßa Object.create()
1. ch·ªâ ƒë·ªãnh cho prototype cho ƒë·ªëi t∆∞·ª£ng m·ªõi
=> gi√∫p ta t·∫°o ƒë·ªëi t∆∞·ª£ng t·ª± 1 prototype ƒë√£ c√≥, thay v√¨ s·ª≠ d·ª•ng c√°c ph∆∞∆°ng th·ª©c t·∫°o ƒë·ªëi
t∆∞·ª£ng th√¥ng qua h√†m contructor
2. thi·∫øt k·∫ø k·∫ø th·ª´a (inheritance)
=> Object.create() cung c·∫•p 1 c√°ch d·ªÖ d√†ng v√† tr·ª±c ti·∫øp ƒë·ªÉ thi·∫øt l·∫≠p 1 m·ªëi quan h·ªá k·∫ø th·ª´a ƒë·ªëi t∆∞·ª£ng
3. t·∫°o 1 ƒë·ªëi t∆∞·ª£ng k k·∫ø th·ª´a t·ª´ Object.prototype
=> khi m√¨nh mu·ªën t·∫°o ra 1 ƒë·ªëi t∆∞·ª£ng thu·∫ßn tu√Ω, kh√¥ng cso c√°c ph∆∞∆°ng ph√°p c√≥ s·∫µn t·ª´ Object.prototy()

*/

// ƒë·ªëi t∆∞·ª£ng prototy
const animal = {
	speaks: true,
	speak() {
		console.log('Hello');
	},
};

const dog = Object.create(animal);
dog.name = 'Ch√≥ c·ªè';
// console.log(dog.name);
// dog.speak();

// 3.2: t·∫°o 1 ƒë·ªïi t∆∞·ª£ng m√† k c√≥ prototype (r·ªóng)
const source4 = Object.create(null);
source4.name = 'no property';
// console.log('üöÄ ~ source4:', source4);

// 4. Object.getPrototypeOf() => l·∫•y ra c√°c nguy√™n m·∫´u ban ƒë·∫ßu c·ªßa 1 ƒë·ªëi t∆∞·ª£ng
// console.log(Object.getPrototypeOf(dog));

// 5: 1 s·ªë ph∆∞∆°ng th·ª©c quan tr·ªçng c·ªßa Object.property
// 5.1: toString() => tr·∫£ v·ªÅ 1 chu·ªói m√¥ t·∫£ ƒë·ªëi t∆∞·ª£ng. ph∆∞∆°ng th·ª©c n√†y th∆∞·ªùng ghi ƒë√® trong c√°c ƒë·ªëi t∆∞·ª£ng con ƒë·ªÉ tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt h∆°n
// console.log('üöÄ ~ source1:', source1.toString());
// const person = {
// 	id: 1,
// 	name: 'nguyen van a',
// 	age: 30,
// 	job: 'dev',
// };
/*
5.2: hasOwnProperty: ki·ªÉm tra xem object co√≥ t·ªìn t·∫°i thu·ªôc t√≠nh nh·∫•t ƒë·ªãnh hay kh√¥ng
*/
// console.log(person.hasOwnProperty('id'));
// console.log('üöÄ ~ person:', person);
// console.log(person.hasOwnProperty('salary'));

// 5.3: valueOf() => tr·∫£ v·ªÅ gi√° tr·ªã nguy√™n thu·ª∑ c·ªßa ƒë·ªëi t∆∞·ª£ng
// console.log(person.valueOf());

/*
5.4: isPrototypeOf() => ki·ªÉm tra xem ƒë·ªëi t∆∞·ª£ng c√≥ ph·∫£i l√† prototype c·ªßa ƒë·ªëi t∆∞·ª£ng kh√°c hay kh√¥ng
*/

const animal1 = {
	speak() {
		console.log('hello');
	},
};
const dog1 = Object.create(animal1);
// console.log(dog1);
// console.log(animal1.isPrototypeOf(dog));

/*
6. Object.key(): ch·ªâ l·∫•y ra key v√† tr·∫£ v·ªÅ d·∫°ng m·∫£ng cho ch√∫ng ta
*/
console.log(Object.keys(person));

/*
7. Object.values()
*/
console.log(Object.values(person));

// ads th·ªß
// typescript
