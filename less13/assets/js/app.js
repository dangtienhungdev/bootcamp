// reduce()

/*
reduce: l√† 1 ph∆∞∆°ng th·ª©c r·∫•t m·∫°nh d√πng ƒë·ªÉ 't√≠ch lu·ªπ' (aggregate) c√°c gi√° tr·ªã trong m·∫£ng th√†nh 1 gi√° tr·ªã duy nh·∫•t.

c√∫ ph√°p c∆° b·∫£n c·ªßa reudce():
array.reduce(function (accumulator, value, index, array) {}, initialValue)
- accumulator: gi√° tr·ªã t√≠ch lu·ªπ(ho·∫∑c k·∫øt qu·∫£ cu·ªëi c√πng) trong m·ªói l·∫ßn l·∫∑p qua m·∫£ng.
Trong m·ªói l·∫ßn h√†m, "accumulator" s·∫Ω l∆∞u l·∫°i gi√° tr·ªã c·ªßa ph√©p to√°n tr∆∞·ªõc ƒë√≥
- currentValue(value): ph·∫ßn t·ª≠ hi·ªán t·∫°i trong m·∫£ng
- currentIndex(index)(tu·ª≥ ch·ªçn): ch·ªâ m·ª•c c·ªßa c√°c ph·∫ßn t·ª≠
- array(tu·ª≥ ch·ªçn): m·∫£ng g·ªëc c·ªßa ch√∫ng ta
- initialValue(tu·ª≥ ch·ªçn): gi√° tr·ªã ban ƒë·∫ßu c·ªßa "accumulator". n·∫øu kh√¥ng cung c·∫•p
gi√° ban ƒë·∫ßu, gi√° tr·ªã c·ªßa ph·∫ßn ƒë·∫ßu ti√™n trong m·∫£ng s·∫Ω ƒë∆∞·ª£c d√πng l√†m gi√° tr·ªã kh·ªüi t·∫°o.
N·∫øu m·∫£ng r·ªóng kh√¥ng c√≥ "initialValue", s·∫Ω x·∫£y ra l·ªói
*/

const numbers = [1, 2, 3, 4, 5];
// let sum = 0; // initialValue

// for (let i = 0; i < numbers.length; i++) {
// 	sum += numbers[i];
// }

// console.log(sum);
// const total = numbers.reduce(function (accumulator, currentValue) {
// 	const sum = accumulator + currentValue;
// 	// console.table({ accumulator, currentValue, sum });
// 	return sum;
// }, 0);
// console.log('üöÄ ~ total ~ total:', total);

// const cart = [
// 	{ item: 'Apple', price: 10 },
// 	{ item: 'Banana', price: 20 },
// 	{ item: 'Orage', price: 30 },
// ];

// let totalPrice = 0;
// for (let i = 0; i < cart.length; i++) {
// 	totalPrice += cart[i].price;
// }
// console.log('üöÄ ~ totalPrice:', totalPrice);

// const totalPrice = cart.reduce(function (accumulator, currentItem) {
// 	return accumulator + currentItem.price;
// }, 0);
// console.log('üöÄ ~ totalPrice ~ totalPrice:', totalPrice);

const users = {
	name: 'Dang Tien Hung',
	age: 40,
	address: 'H√† n·ªôi',
};
let property = users.name;
let name1 = users['name'];

function countFruits() {
	const fruits = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple'];

	const countFruits = fruits.reduce(function (accumulator, currentItem) {
		if (accumulator[currentItem]) {
			accumulator[currentItem] += 1;
		} else {
			accumulator[currentItem] = 1;
		}

		return accumulator;
	}, {});
	console.log('üöÄ ~ countFruits ~ countFruits:', countFruits);
}
// countFruits();

function newName() {
	const person = [
		{ id: 1, name: 'A', age: 10 },
		{ id: 2, name: 'B', age: 20 },
		{ id: 3, name: 'C', age: 30 },
	];

	// output: ['A', 'B', 'C']
	const names = person.reduce(function (acc, value) {
		acc.push(value.name);
		return acc;
	}, []);
	console.log(names);

	const names2 = person.reduce(function (acc, value) {
		acc.push(value.name);
		return acc;
	}, []);
	console.log('üöÄ ~ names2 ~ names2:', names2);
}
// newName();

// chuy·ªÉn m·∫£ng th√†nh object
function personObjs() {
	const person = [
		{ id: 1, name: 'A', age: 10 },
		{ id: 1, name: 'B', age: 20 },
		{ id: 3, name: 'C', age: 30 },
	];

	// output: {1: 'A', 2: 'B', 3: 'C'}

	const output = person.reduce(function (acc, value) {
		console.log('üöÄ ~ output ~ acc:', acc);
		acc[value.id] = value.name; // {1: 'A', 2: 'B'}
		console.log('üöÄ ~ output ~ acc[value.id]:', acc[value.id]);
		return acc;
	}, {});
	console.log('üöÄ ~ output ~ output:', output);
}
// personObjs();

/*
1. t√¨m gi√° tr·ªã l·ªõn nh·∫•t trong
const numbers = [5, 12, 8, 130, 44]
out: 130

2. const nestedArray = [[1, 2, 3], [4, 5], [6, 7, 8]]
output: [1, 2, 3, 4, 5, 6, 7, 8]

3. group by array
const products = [
	{ id: 1, name: 'Laptop', category: 'Eletronices' },
	{ id: 2, name: 'Shirt', category: 'Clothing' },
	{ id: 3, name: 'Phone', category: 'Eletronices' },
	{ id: 4, name: 'Pants', category: 'Clothing' },
];

output:
const result = {
	Eletronices: [
		{ id: 1, name: 'Laptop', category: 'Eletronices' },
		{ id: 3, name: 'Phone', category: 'Eletronices' },
	],
	Clothing: [
		{ id: 2, name: 'Shirt', category: 'Clothing' },
		{ id: 4, name: 'Pants', category: 'Clothing' },
	],
};

*/
