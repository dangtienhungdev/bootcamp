/**

3. ph∆∞∆°ng th·ª©c ƒë·ªÉ sao ch√©p 1 ƒë·ªïi t∆∞·ª£ng
ƒë·ªÅ b√†i: t·∫°o 1 ƒë·ªëi t∆∞·ª£ng car v·ªõi ph∆∞∆°ng th·ª©c clone ƒë·ªÉ copy to√†n b·ªô thu·ªôc t√≠nh v√† ph∆∞∆°ng
th·ª©c c·ªßa n√≥ sang 1 d·ªëi t∆∞·ª£ng m·ªõi

4. check xem thu·ªôc t√≠nh c√≥ t·ªìn t·∫°i ·ªü b√™n trong ƒë·ªëi t∆∞·ª£ng hay kh√¥ng
cho ph∆∞∆°ng th·ª©c hasProperty ki·ªÉm tra xem thu·ªôc t√≠nh ƒë√£ cho c√≥ t·ªìn t·∫°i hay kh√¥ng

5. t·∫°o ra 1 ph∆∞∆°ng th·ª©c getInfo in ra th√¥ng tin ƒë·ªëi t∆∞·ª£ng d∆∞·ªõi d·∫°ng chu·ªói name, brand
`Name is ${name}, Brand is ${brand}`

6. t·∫°o 1 ph∆∞∆°ng th·ª©c ki·ªÉm tra xem 1 object  c√≥ r·ªóng hay kh√¥ng, checkIsEmpty

*/
// console.log(this);
const car = {
	brand: 'BMW',
	model: 'I8',
	name: 'abc',
	// clone....
	clone() {
		// console.log(this);
		return Object.assign({}, this);
	},
	hasProperty(property) {
		return this.hasOwnProperty(property);
	},
	getInfo() {
		return `Name is ${this.name}, Brand is ${this.brand}`;
	},
	checkIsEmpty(obj) {
		return Object.keys(obj).length === 0;
	},
};
// console.log('üöÄ ~ car:', car);

const car3 = { test: '1' };

const car2 = car.clone();
// console.log(car.hasProperty('age'));
// console.log(car.hasProperty('name'));
// console.log(car.getInfo());
// console.log(car2);
// const car2 = car.clone()
// console.log("üöÄ ~ car2:", car2)
// console.log(car.checkIsEmpty({ test: 1 }));
